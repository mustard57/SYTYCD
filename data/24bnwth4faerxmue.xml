<message message-id="200407071629.i67GTP016677@morbius.ch.collab.net" list="org.tigris.subversion.svn" id="24bnwth4faerxmue" type="checkins" date="2004-07-07T11:29:25-05:00" year="2004-01-01" year-month="2004-07-01" year-month-day="2004-07-07" thread-id="24bnwth4faerxmue"><headers><envelope-from-line>From svn-return-11398-tigrisq-archive=mail-subversion=svn=tigris.org=tigris.org@subversion.tigris.org Wed Jul 07 16:46:05 2004</envelope-from-line><from personal="sussman@tigris.org" address="sussman@tigris.org">sussman@tigris.org</from><to personal="svn@subversion.tigris.org" address="svn@subversion.tigris.org">svn@subversion.tigris.org</to><subject normal="svn commit: r10161 - trunk/notes">svn commit: r10161 - trunk/notes</subject><return-path>svn-return-11398-tigrisq-archive=mail-subversion=svn=tigris.org=tigris.org@subversion.tigris.org</return-path><x-spam-checker-version>SpamAssassin 3.2.4 (2008-01-01) on
	spam-1.dev.markmail.int</x-spam-checker-version><x-spam-level/><x-spam-status>No, score=-2.4 required=5.0 tests=BAYES_00,NO_RELAYS
	autolearn=disabled version=3.2.4</x-spam-status><delivered-to>tigrisq-archive=mail-subversion=svn=tigris.org@tigris.org</delivered-to><received>(qmail 27082 invoked by uid 5302); 7 Jul 2004 16:46:05 -0000</received><mailing-list>contact svn-help@subversion.tigris.org; run by ezmlm</mailing-list><precedence>bulk</precedence><list-help>&lt;mailto:svn-help@subversion.tigris.org&gt;</list-help><list-unsubscribe>&lt;mailto:svn-unsubscribe@subversion.tigris.org&gt;</list-unsubscribe><list-post>&lt;mailto:svn@subversion.tigris.org&gt;</list-post><delivered-to>mailing list svn@subversion.tigris.org</delivered-to><received>(qmail 27068 invoked from network); 7 Jul 2004 16:46:04 -0000</received><date>Wed, 7 Jul 2004 11:29:25 -0500</date><message-id>200407071629.i67GTP016677@morbius.ch.collab.net</message-id><x-authentication-warning>morbius.ch.collab.net: svn set sender to sussman@tigris.org using -f</x-authentication-warning><mime-version>1.0</mime-version><content-type>text/plain; charset=UTF-8</content-type><reply-to>dev@subversion.tigris.org</reply-to></headers><normalized-references><normalized-message-id>200407071629.i67GTP016677@morbius.ch.collab.net</normalized-message-id></normalized-references><body type="text/plain; charset=utf-8"><para depth="0">Author: sussman
Date: Wed Jul  7 11:29:24 2004
New Revision: 10161

</para><para depth="0">Added:
   trunk/notes/merge-tracking.txt
Log:
* notes/merge-tracking.txt:  start documenting various merge problems.

</para><para depth="0">Added: trunk/notes/merge-tracking.txt
Url:<br/><url>http://svn.collab.net/viewcvs/svn/trunk/notes/merge-tracking.txt?view=auto&amp;rev=10161</url>
==============================================================================
--- (empty file)
+++ trunk/notes/merge-tracking.txt	Wed Jul  7 11:29:24 2004
@@ -0,0 +1,120 @@
+
+                       Merge-Tracking in Subversion
+                       ============================
+
+These notes try to break apart the various sub-problems of
+"merge-tracking".  People can mean a whole lot of different things
+when they utter that phrase, so this is an attempt to describe various
+aspects.
+
+This is NOT a design document.  It offers no solutions or proposals.
+It's just a place to enumerate potential problems that need solving.
+
+[At the moment, implementing locking is higher priority;  but I wanted
+to document these problems here so we don't forget them.]
+
+
+A.  Solve the "repeated merge" problem at the level of whole changesets.
+
+    * Track which changesets have been applied where, so users can
+      repeatedly merge branchA to branchB without having to remember
+      the last range of revisions ported.
+
+    * Track any "changeset cherry-picking" done by users, so we don't
+      accidentally re-merge changesets that are already applied.
+
+    * This is the problem that svk and arch claim to have already
+      solved, what they're calling "star-merge".  Need to investigate
+      how they're doing it, might be a good precedent to imitate.
+
+B.  Make 'hunks' of contextually-merged text sensitive to ancestry.
+
+      This is like a high-resolution version of problem #1.  Rather
+      than tracking whole changesets, we track the lineage of specific
+      lines of code within a file.  The basic idea is that when
+      re-merging a particular hunk of code, the contextual-merging
+      process is aware that certain lines of code already represent
+      the merging of particular lines of development.  Jack Repenning
+      has a great example of this from Clearcase, which we can draw in
+      this space.  See diagram at the bottom for an explanation.
+
+C.  'svn merge' needs to track renames better.  
+
+     Edit foo.c on branchA.  Rename foo.c to bar.c on branchB.
+
+     1. Try merging the branchA edit into a working copy of branchB:
+        'svn merge' will skip the file, because it can't find it.
+
+     2. Conversely, try merging branchB rename to branchA: 'svn merge'
+        will delete the 'newer' version of foo.c and add bar.c, which
+        has the older text.
+
+     Problem #2 stems from the fact that we don't have true renames,
+     just copies and deletes.  That's not fixable without an fs schema
+     change and (probably) a libsvn_wc rewrite.
+
+     It's not clear what it would take to solve problem #1.
+
+
+---------------------------------------------
+Here's an example of problem B above, demonstrating how individual
+lines of code can be "merge tracked".  
+
+In this diagram, we're drawing the lineage of a single file, with time
+flowing downwards.  The file begins life with three lines of text,
+"1\n2\n\3\n".  The file then splits into two lines of development.
+
+                                 
+                          
+                    1     
+                    2     
+                    3     
+                  /   \   
+                 /     \  
+                /       \ 
+            one           1   
+            two           2.5 
+            three         3   
+             |     \      |
+             |      \     |   
+             |       \    |            
+             |        \   |            
+             |         \ one           
+             |           two-point-five
+             |           three        
+             |            |
+             |            |
+             |            |
+            one          one
+            Two          two-point-five
+            three        newline       
+               \         three  
+                \         |   
+                 \        |
+                  \       |
+                   \      |
+                    \     |
+                     \    |
+                      \   |
+                       \  |
+                         one
+                         Two-point-five
+                         newline       
+                         three  
+                              
+
+It's the second merge that's important here.  
+
+In a system like Subversion, the second merge of the left branch to
+the right will fail miserably: the whole file's contents will be
+placed within conflict markers.  That's because it's trying to dumbly
+apply a patch that changes "1\2\3" to "one\Two\Three", and the target
+file has no matching lines at all.
+
+A smarter system (like Clearcase) would remember that the previous
+merge had happened, and specifically remember that the lines "one" and
+"three" are the results of that previous merge.  It would only mark
+the single "two-point-five" line as something which needs human
+attention.
+
+

</para><footer type="list-management" depth="0">---------------------------------------------------------------------
To unsubscribe, e-mail: <email>svn-unsubscribe@subversion.tigris.org</email>
For additional commands, e-mail: <email>svn-help@subversion.tigris.org</email>

</footer></body></message>