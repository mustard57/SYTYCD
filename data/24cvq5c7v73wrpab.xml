<message message-id="C4EB00F1-16C9-4817-8B38-278960F80755@redsnapper.net" list="org.apache.xerces.c-users" id="24cvq5c7v73wrpab" type="users" date="2009-05-13T09:14:15+01:00" year="2009-01-01" year-month="2009-05-01" year-month-day="2009-05-13" thread-id="aijec44vuxje6bye"><headers><envelope-from-line>Wed May 13 00:14:46 2009</envelope-from-line><from personal="Ben Griffin" address="ben@redsnapper.net">Ben Griffin &lt;ben@redsnapper.net&gt;</from><to personal="c-users@xerces.apache.org" address="c-users@xerces.apache.org">c-users@xerces.apache.org</to><subject normal="XMLString::catString() memory errors">Re: XMLString::catString() memory errors</subject><received>from srv-117c-be06.markmail.marklogic.com ([172.19.8.46])
          by mail-1.a.markmail.int (JAMES SMTP Server 2.3.1) with SMTP ID 971
          for &lt;tomas.jackson.hodge@a.markmail.org&gt;;
          Wed, 13 May 2009 00:14:46 -0800 (GMT-08:00)</received><received>from mail.apache.org (slb-117n.markmail.marklogic.com [172.19.8.33])
	by mgw-1.public.markmail.int (Postfix) with SMTP id 510FE29082C0
	for &lt;tomas.jackson.hodge@a.markmail.org&gt;; Wed, 13 May 2009 01:14:23 -0700 (PDT)</received><received>(qmail 58538 invoked by uid 500); 13 May 2009 08:14:45 -0000</received><mailing-list>contact c-users-help@xerces.apache.org; run by ezmlm</mailing-list><precedence>bulk</precedence><list-help>&lt;mailto:c-users-help@xerces.apache.org&gt;</list-help><list-unsubscribe>&lt;mailto:c-users-unsubscribe@xerces.apache.org&gt;</list-unsubscribe><list-post>&lt;mailto:c-users@xerces.apache.org&gt;</list-post><list-id>&lt;c-users.xerces.apache.org&gt;</list-id><reply-to>c-users@xerces.apache.org</reply-to><delivered-to>mailing list c-users@xerces.apache.org</delivered-to><received>(qmail 58527 invoked by uid 99); 13 May 2009 08:14:45 -0000</received><received>from athena.apache.org (HELO athena.apache.org) (140.211.11.136)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 13 May 2009 08:14:45 +0000</received><x-asf-spam-status>No, hits=1.2 required=10.0
	tests=SPF_HELO_PASS,SPF_NEUTRAL</x-asf-spam-status><x-spam-check-by>apache.org</x-spam-check-by><received-spf>neutral (athena.apache.org: local policy)</received-spf><received>from [212.74.114.16] (HELO mk-outboundfilter-6-a-2.mail.uk.tiscali.com) (212.74.114.16)
    by apache.org (qpsmtpd/0.29) with ESMTP; Wed, 13 May 2009 08:14:37 +0000</received><x-trace>102541155/mk-outboundfilter-6.mail.uk.tiscali.com/F2S/$F2S-NILDRAM-ACCEPTED/f2s-nildram-customers/81.6.250.44/None/ben@redsnapper.net</x-trace><x-sbrs>None</x-sbrs><x-remoteip>81.6.250.44</x-remoteip><x-ip-mail-from>ben@redsnapper.net</x-ip-mail-from><x-smtp-auth/><x-mua>Apple Mail (2.935.3)</x-mua><x-ip-bhb>Once</x-ip-bhb><x-ironport-anti-spam-filtered>true</x-ironport-anti-spam-filtered><x-ironport-anti-spam-result>AtoBAGMeCkpRBvos/2dsb2JhbAAIzgqEAgU</x-ironport-anti-spam-result><x-ironport-av>E=Sophos;i="4.41,186,1241391600"; 
   d="scan'208";a="102541155"</x-ironport-av><x-ip-direction>IN</x-ip-direction><received>from duffy.gotadsl.co.uk (HELO [192.168.1.10]) ([81.6.250.44])
  by smtp.f2s.tiscali.co.uk with ESMTP; 13 May 2009 09:14:15 +0100</received><message-id>C4EB00F1-16C9-4817-8B38-278960F80755@redsnapper.net</message-id><in-reply-to>&lt;4A09C9FC.9040904@apache.org&gt;</in-reply-to><content-type>text/plain; charset=US-ASCII; format=flowed; delsp=yes</content-type><content-transfer-encoding>7bit</content-transfer-encoding><mime-version>1.0 (Apple Message framework v935.3)</mime-version><date>Wed, 13 May 2009 09:14:15 +0100</date><references>&lt;AD7EC283-784F-4F35-ADE0-6CA2AD5A9339@redsnapper.net&gt; &lt;4A09C9FC.9040904@apache.org&gt;</references><x-mailer>Apple Mail (2.935.3)</x-mailer><x-virus-checked>Checked by ClamAV on apache.org</x-virus-checked></headers><normalized-references><normalized-message-id>C4EB00F1-16C9-4817-8B38-278960F80755@redsnapper.net</normalized-message-id><normalized-in-reply-to>4A09C9FC.9040904@apache.org</normalized-in-reply-to><normalized-reference>AD7EC283-784F-4F35-ADE0-6CA2AD5A9339@redsnapper.net</normalized-reference><normalized-reference>4A09C9FC.9040904@apache.org</normalized-reference></normalized-references><body type="text/plain; charset=us-ascii; format=flowed; delsp=yes"><greeting depth="0">Hi there Dave,
</greeting><para depth="0">
Okay that was a good strategy, except that it appears there is no  
append for vectors, and the XMLString accessor is called stringLen.

</para><para depth="0">Instead, taking the basic strategy of using STL containers and not  
using catString, we came up with the following:

</para><para depth="0">  if (addon != NULL and *addon != 0 ) {
	basic_string&lt;XMLCh&gt; result;
	const XMLCh* const base = pt-&gt;getNodeValue();
	result.append(base);
	result.append(addon);
	pt-&gt;setNodeValue(result.c_str());
	XMLString::release(&amp;addon);	
}	

</para><para depth="0">On 12 May 2009, at 20:11, David Bertoni wrote:

</para><quote depth="1"><quotepara depth="1">Ben Griffin wrote:
</quotepara><quote depth="2"><quotepara depth="2">For the last few weeks, we have been using XMLString::catString()  
for fast appends to textnodes; something like:
//Only reachable by nodes that support setNodeValue()
append(DOMNode*&amp; pt,XMLCh*&amp; addon) {
   if (addon != NULL and *addon != 0 ) {
       XMLCh* orig = XMLString::replicate(pt-&gt;getNodeValue());
       XMLString::catString(orig, addon);
       pt-&gt;setNodeValue(orig);
       XMLString::release(&amp;orig);
       XMLString::release(&amp;addon);
   }
}
However, we began to notice occasional crashes, and worked out that  
XMLString::catString does not check for memory overflow.
</quotepara></quote><quotepara depth="1">How could it check for memory overflow?  It has no idea how much  
memory was allocated, and XMLString::replicate() doesn't allocated  
extra memory anyway. Here's the documentation of the function:

</quotepara><quotepara depth="1">/** Concatenates two strings.
 *
 * catString appends src to target and
 * terminates the resulting string with a null character. The  
initial character of
 * src overwrites the terminating character of target.
 * No overflow checking is performed when strings are copied or  
appended.
 * The behavior of catString is undefined if source and destination
 * strings overlap.
 *
 * @param target Null-terminated destination string
 * @param src Null-terminated source string
 */

</quotepara><quote depth="2"><quotepara depth="2">Is there a means of being able to guarantee additional memory for  
catString, so that we do not have to transcode everything first?
</quotepara></quote><quotepara depth="1">There is no need to do any transcoding here, since all of the  
strings are encoded in UTF-16.

</quotepara><quotepara depth="1">You could use std::vector:

</quotepara><quotepara depth="1">const XMLCh* const base = pt-&gt;getNodeValue();
const XMLSize_t baseLength = XMLString::strLength(base);
const XMLSize_t addonLength = XMLString::strLength(addon);

</quotepara><quotepara depth="1">std::vector&lt;XMLCh&gt; buffer;
buffer.reserve(baseLength + addonLength + 1);
buffer.append(
   buffer.end(),
   base,
   base + baseLength);
buffer.append(
   buffer.end(),
   addon,
   addon + addonLength + 1);
pt-&gt;setNodeValue(&amp;*buffer.begin());
XMLString::release(&amp;addon);

</quotepara><quotefooter type="signature" depth="1" hash="6559354550305431827">Dave
</quotefooter></quote><footer type="noise" depth="0">
</footer></body></message>