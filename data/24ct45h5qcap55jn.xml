<message message-id="af37e9c505060811561b5ee033@mail.gmail.com" list="org.python.python-list" id="24ct45h5qcap55jn" type="general" date="2005-06-08T14:56:29-04:00" year="2005-01-01" year-month="2005-06-01" year-month-day="2005-06-08" thread-id="sriwyydr5ywozdzj"><headers><envelope-from-line>From lambacck@gmail.com  Wed Jun  8 20:56:29 2005</envelope-from-line><from personal="Chris Lambacher" address="lambacck@gmail.com">Chris Lambacher &lt;lambacck@gmail.com&gt;</from><subject normal="[Pyrex] Allocating an array.array of a specific length in pyrex">[Pyrex] Allocating an array.array of a specific length in pyrex</subject><date>Wed, 8 Jun 2005 14:56:29 -0400</date><in-reply-to>&lt;af37e9c5050608114613a29f3c@mail.gmail.com&gt;</in-reply-to><references>&lt;af37e9c50506081103291936c4@mail.gmail.com&gt;
	&lt;396556a2050608111658e56203@mail.gmail.com&gt;
	&lt;af37e9c5050608112882ab49@mail.gmail.com&gt;
	&lt;af37e9c5050608114613a29f3c@mail.gmail.com&gt;</references><message-id>af37e9c505060811561b5ee033@mail.gmail.com</message-id><content-type>text/plain; charset=iso-8859-1</content-type><mime-version>1.0</mime-version></headers><normalized-references><normalized-message-id>af37e9c505060811561b5ee033@mail.gmail.com</normalized-message-id><normalized-in-reply-to>af37e9c5050608114613a29f3c@mail.gmail.com</normalized-in-reply-to><normalized-reference>af37e9c50506081103291936c4@mail.gmail.com</normalized-reference><normalized-reference>396556a2050608111658e56203@mail.gmail.com</normalized-reference><normalized-reference>af37e9c5050608112882ab49@mail.gmail.com</normalized-reference><normalized-reference>af37e9c5050608114613a29f3c@mail.gmail.com</normalized-reference></normalized-references><body type="text/plain; charset=iso-8859-1"><para depth="0">And we have a winner.

</para><para depth="0">For reference the final code is below.

</para><para depth="0">Thanks for your help,
-Chris

</para><para depth="0">import array
cdef extern from "Python.h":
    int PyObject_AsWriteBuffer(object obj, void **buffer, int *buffer_len)
    int PyObject_AsReadBuffer(object obj, void **buffer, int *buffer_len)
    object PyString_FromStringAndSize(char *, int)
    char *PyString_AsString(object obj)

</para><para depth="0">cdef int get_w_buffer(obj, unsigned char **data, int *length) except -1:
    cdef int result
    cdef void *vd
    # use a void *
    result = PyObject_AsWriteBuffer(obj, &amp;vd, length)
    data[0] = &lt;unsigned char *&gt;vd
    return result

</para><para depth="0">cdef int get_r_buffer(obj, unsigned char **data, int *length) except -1:
    cdef int result
    cdef void *vd
    # use a void *
    result = PyObject_AsReadBuffer(obj, &amp;vd, length)
    data[0] = &lt;unsigned char *&gt;vd
    return result

</para><para depth="0">def encode(int w, int h, in_a):
    cdef unsigned int pixels, a_off, str_off#, buffer_len
    cdef int res, inlen, buffer_len
    cdef unsigned char *in_str, *out_str

</para><para depth="0">    res = get_r_buffer(in_a, &amp;in_str, &amp;inlen)
    if res:
        raise Exception, "Could not get a readable buffer from the input"

</para><para depth="0">    pixels = w * h
    a = PyString_FromStringAndSize(NULL, pixels * 2)
    out_str = &lt;unsigned char *&gt; PyString_AsString(a)
    buffer_len = pixels * 2

</para><para depth="0">    str_off = 0
    a_off = 0
    while a_off &lt; buffer_len and str_off &lt; inlen:
        out_str[a_off] = in_str[str_off]
        out_str[a_off+1] = (in_str[str_off+1] + in_str[str_off+4])/2
        out_str[a_off+2] = in_str[str_off+3]
        out_str[a_off+3] = (in_str[str_off+2] + in_str[str_off+5])/2

</para><para depth="0">        str_off = str_off + 6
        a_off = a_off + 4

</para><para depth="0">    return a

</para><footer type="signature" hash="14061923481766933474" depth="0">On 6/8/05, Chris Lambacher &lt;lambacck at gmail.com&gt; wrote:
</footer><quote depth="1"><quotepara depth="1">I replaced:
a = array.array('B', , [0] * (pixels * 2))
with:
a = PyString_FromStringAndSize(NULL, pixels * 2)

</quotepara><quotepara depth="1">and got:
C:\work\testing\plink_o_ip&gt;python ycbycr.py
Traceback (most recent call last):
  File "ycbycr.py", line 62, in ?
    ycbycr = image2ycbycr(im)
  File "ycbycr.py", line 38, in image2ycbycr
    return _ycbycr.ycbcr2ycbycr(w, h, ycbcrim.tostring())
  File "_ycbycr.pyx", line 42, in _ycbycr.ycbcr2ycbycr
    res = get_w_buffer(a, &amp;out_str, &amp;buffer_len)
TypeError: Cannot use string as modifiable buffer

</quotepara><quotepara depth="1">Strings are not mutable so this is not going to work for me :(

</quotepara><quotepara depth="1">Is there a way to allocate a python buffer object and give that to
array.array or a string object?

</quotepara><quotefooter type="signature" hash="17648522130752750685" depth="1">-Chris

</quotefooter><quotefooter type="signature" hash="14061923481766933474" depth="1">On 6/8/05, Chris Lambacher &lt;lambacck at gmail.com&gt; wrote:
</quotefooter><quote depth="2"><quotepara depth="2">The memory is not temporary, I am passing it out as an array, thus the
malloc/free route will require double allocation(once for malloc/free,
once for array.array).  I am not using string because when I tried to
pass the data in as string, pyrex complained about the conversion.
However, I could probably use the same PyObject_AsReadBuffer function
call to get at the data passed in to the function as a string and then
pass it out as a string as well using the interface suggested (
PyString_FromStringAndSize and PyString_AsString ).  Perhapse I need
to substitute PyObject_AsWriteBuffer instead of PyString_AsString in
order for my changes to get propegated back to the string object?

</quotepara><quotepara depth="2">-Chris

</quotepara><quotepara depth="2">On 6/8/05, Adam Langley &lt;alangley at gmail.com&gt; wrote:
</quotepara><quote depth="3"><quotepara depth="3">On 6/8/05, Chris Lambacher &lt;lambacck at gmail.com&gt; wrote:
</quotepara><quote depth="4"><quotepara depth="4">My question is, is there a better way to
allocate the memory for the array.array object than:
      a = array.array('B', [0] * (pixels * 2))
</quotepara></quote><quotepara depth="3">
cdef unsigned char *buffer
temp_string = PyString_FromStringAndSize(NULL, length)
buffer = &lt;unsigned char *&gt; PyString_AsString(temp_string)

</quotepara><quotepara depth="3">That's one way to do it. But it looks like you just want an area of
memory so why not:

</quotepara><quotepara depth="3">cdef extern from "stdlib.h":
  ctypedef unsigned long size_t
  void *malloc(size_t size)
  void free(void *mem)

</quotepara><quotepara depth="3">?

</quotepara><quotepara depth="3">AGL

</quotepara><quotefooter type="signature" hash="8733701972930274150" depth="3">--
Adam Langley                                      agl at imperialviolet.org
<url>http://www.imperialviolet.org</url>                       (+44) (0)7906 332512
PGP: 9113   256A   CC0F   71A6   4C84   5087   CDA5   52DF   2CB6   3D60

</quotefooter></quote><quotefooter type="signature" hash="5015123392680674483" depth="2">--
Christopher Lambacher
lambacck at computer.org

</quotefooter></quote><quotefooter type="signature" hash="5015123392680674483" depth="1">--
Christopher Lambacher
lambacck at computer.org

</quotefooter></quote><footer type="signature" hash="5363149701098565573" depth="0">-- 
Christopher Lambacher
lambacck at computer.org
</footer></body></message>