<message message-id="20110102200840.33CD558148@git.kde.org" list="org.kde.kde-commits" id="24cb5gzbgxadjqwq" type="checkins" date="2011-01-02T21:08:40+01:00" year="2011-01-01" year-month="2011-01-01" year-month-day="2011-01-02" thread-id="24cb5gzbgxadjqwq"><headers><envelope-from-line>Sun Jan 02 13:03:25 2011</envelope-from-line><from personal="Cyrille Berger" address="cberger@cberger.net">Cyrille Berger &lt;cberger@cberger.net&gt;</from><to personal="kde-commits@kde.org" address="kde-commits@kde.org">kde-commits@kde.org</to><subject normal="[Calligra] 014f9ed: remove modeltest, it is not needed anymore">[Calligra] 014f9ed: remove modeltest, it is not needed anymore</subject><received>from srv-117c-be06.markmail.marklogic.com ([172.19.8.46])
          by mail-1.a.markmail.int (JAMES SMTP Server 2.3.1) with SMTP ID 758
          for &lt;juliet.walls.arnold@a.markmail.org&gt;;
          Sun, 2 Jan 2011 13:03:25 -0800 (GMT-08:00)</received><received>from ktown.kde.org (slb-117n.markmail.marklogic.com [172.19.8.33])
	by mgw-1.public.markmail.int (Postfix) with SMTP id 71D2B290808C
	for &lt;juliet.walls.arnold@a.markmail.org&gt;; Sun,  2 Jan 2011 13:03:01 -0800 (PST)</received><received>(qmail 31842 invoked by uid 72); 2 Jan 2011 20:34:12 -0000</received><received>(qmail 25746 invoked from network); 2 Jan 2011 20:29:46 -0000</received><x-spam-checker-version>SpamAssassin 3.2.5 (2008-06-10) on ktown.kde.org</x-spam-checker-version><received>from unknown (HELO git.kde.org) (195.135.221.71)
	by ktown.kde.org with SMTP; 2 Jan 2011 20:29:28 -0000</received><received>by git.kde.org (Postfix, from userid 1001)
	id 33CD558148; Sun,  2 Jan 2011 21:08:40 +0100 (CET)</received><x-commit-directories>(0) trunk/koffice/</x-commit-directories><mime-version>1.0</mime-version><content-type>text/plain; charset=UTF-8</content-type><message-id>20110102200840.33CD558148@git.kde.org</message-id><date>Sun,  2 Jan 2011 21:08:40 +0100 (CET)</date><x-beenthere>kde-commits@kde.org</x-beenthere><x-mailman-version>2.1.9</x-mailman-version><precedence>list</precedence><reply-to>kde-commits@kde.org</reply-to><list-id>Notification of KDE commits &lt;kde-commits.kde.org&gt;</list-id><list-unsubscribe>&lt;https://mail.kde.org/mailman/listinfo/kde-commits&gt;,
	&lt;mailto:kde-commits-request@kde.org?subject=unsubscribe&gt;</list-unsubscribe><list-post>&lt;mailto:kde-commits@kde.org&gt;</list-post><list-help>&lt;mailto:kde-commits-request@kde.org?subject=help&gt;</list-help><list-subscribe>&lt;https://mail.kde.org/mailman/listinfo/kde-commits&gt;,
	&lt;mailto:kde-commits-request@kde.org?subject=subscribe&gt;</list-subscribe><content-transfer-encoding>quoted-printable</content-transfer-encoding></headers><normalized-references><normalized-message-id>20110102200840.33CD558148@git.kde.org</normalized-message-id></normalized-references><body type="text/plain; charset=utf-8"><para depth="0">commit 014f9ed73408decadd56acbfc22198d8bde339a4
branch master
Author: Cyrille Berger &lt;<email>cberger@cberger.net</email>&gt;
Date:   Sat Mar 20 23:19:06 2010 +0100

</para><para depth="0">    remove modeltest, it is not needed anymore

</para><para depth="0">    --HG--
    branch : flake-2.1

</para><para depth="0">diff --git a/braindump/src/CMakeLists.txt b/braindump/src/CMakeLists.txt
index 2d6fda8..06b1a0a 100644
--- a/braindump/src/CMakeLists.txt
+++ b/braindump/src/CMakeLists.txt
@@ -22,7 +22,6 @@ set(braindump_SRCS
   Utils.cpp
   View.cpp
   ViewManager.cpp
-  modeltest.cpp
   # Layouts
   layouts/ColumnLayout.cpp
   layouts/FreeLayout.cpp
diff --git a/braindump/src/DocumentModel.cpp b/braindump/src/DocumentModel.cpp
index d35226e..2025c72 100644
--- a/braindump/src/DocumentModel.cpp
+++ b/braindump/src/DocumentModel.cpp
@@ -26,20 +26,18 @@
 #include &lt;KoShapeRenameCommand.h&gt;

</para><para depth="0"> #include "RootSection.h"
-#include "modeltest.h"
 #include "Section.h"
 #include "commands/RenameSectionCommand.h"
 #include "commands/InsertSectionCommand.h"
 #include "commands/MoveSectionCommand.h"

</para><para depth="0">-DocumentModel::DocumentModel( QObject* parent, RootSection* document ) :<br/>DocumentSectionModel(parent), m_document(document), m_modelTest(new<br/>ModelTest(this))
+DocumentModel::DocumentModel( QObject* parent, RootSection* document ) :<br/>DocumentSectionModel(parent), m_document(document)
 {
   Q_ASSERT(m_document);
 }

</para><para depth="0"> DocumentModel::~DocumentModel()
 {
-  delete m_modelTest;
 }

</para><para depth="0"> int DocumentModel::rowCount(const QModelIndex &amp;parent) const
diff --git a/braindump/src/DocumentModel.h b/braindump/src/DocumentModel.h
index 491c253..8e3bb35 100644
--- a/braindump/src/DocumentModel.h
+++ b/braindump/src/DocumentModel.h
@@ -23,7 +23,6 @@
 #include "import/DocumentSectionModel.h"

</para><para depth="0"> class RootSection;
-class ModelTest;
 class Section;
 class SectionGroup;

</para><para depth="0">@@ -59,7 +58,6 @@ class DocumentModel : public DocumentSectionModel {
     void* dataToIndex(Section* section) const;
   private:
     RootSection* m_document;
-    ModelTest* m_modelTest;
 };

</para><para depth="0"> #endif
diff --git a/braindump/src/modeltest.cpp b/braindump/src/modeltest.cpp
deleted file mode 100644
index 4a0a536..0000000
--- a/braindump/src/modeltest.cpp
+++ /dev/null
@@ -1,534 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2007 Trolltech ASA. All rights reserved.
-**
-** This file is part of the Qt Concurrent project on Trolltech Labs.
-**
-** This file may be used under the terms of the GNU General Public
-** License version 2.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of
-** this file.  Please review the following information to ensure GNU
-** General Public Licensing requirements will be met:
-** <url>http://www.trolltech.com/products/qt/opensource.html</url>
-**
-** If you are unsure which license is appropriate for your use, please
-** review the following information:
-** <url>http://www.trolltech.com/products/qt/licensing.html</url> or contact the
-** sales department at <email>sales@trolltech.com</email>.
-**
-** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
-** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
-**
-****************************************************************************/
-
-#include &lt;QtGui/QtGui&gt;
-
-#include "modeltest.h"
-
-Q_DECLARE_METATYPE(QModelIndex)
-
-/*!
-    Connect to all of the models signals.  Whenever anything happens recheck<br/>everything.
-*/
-ModelTest::ModelTest(QAbstractItemModel *_model, QObject *parent) :<br/>QObject(parent), model(_model), fetchingMore(false)
-{
-    Q_ASSERT(model);
-
-    connect(model, SIGNAL(columnsAboutToBeInserted(const QModelIndex &amp;, int,<br/>int)),
-            this, SLOT(runAllTests()));
-    connect(model, SIGNAL(columnsAboutToBeRemoved(const QModelIndex &amp;, int,<br/>int)),
-            this, SLOT(runAllTests()));
-    connect(model, SIGNAL(columnsInserted(const QModelIndex &amp;, int, int)),
-            this, SLOT(runAllTests()));
-    connect(model, SIGNAL(columnsRemoved(const QModelIndex &amp;, int, int)),
-            this, SLOT(runAllTests()));
-    connect(model, SIGNAL(dataChanged(const QModelIndex &amp;, const QModelIndex<br/>&amp;)),
-            this, SLOT(runAllTests()));
-    connect(model, SIGNAL(headerDataChanged(Qt::Orientation, int, int)),
-            this, SLOT(runAllTests()));
-    connect(model, SIGNAL(layoutAboutToBeChanged ()), this,<br/>SLOT(runAllTests()));
-    connect(model, SIGNAL(layoutChanged ()), this, SLOT(runAllTests()));
-    connect(model, SIGNAL(modelReset ()), this, SLOT(runAllTests()));
-    connect(model, SIGNAL(rowsAboutToBeInserted(const QModelIndex &amp;, int,<br/>int)),
-            this, SLOT(runAllTests()));
-    connect(model, SIGNAL(rowsAboutToBeRemoved(const QModelIndex &amp;, int, int)),
-            this, SLOT(runAllTests()));
-    connect(model, SIGNAL(rowsInserted(const QModelIndex &amp;, int, int)),
-            this, SLOT(runAllTests()));
-    connect(model, SIGNAL(rowsRemoved(const QModelIndex &amp;, int, int)),
-            this, SLOT(runAllTests()));
-
-    // Special checks for inserting/removing
-    connect(model, SIGNAL(layoutAboutToBeChanged()),
-            this, SLOT(layoutAboutToBeChanged()));
-    connect(model, SIGNAL(layoutChanged()),
-            this, SLOT(layoutChanged()));
-
-    connect(model, SIGNAL(rowsAboutToBeInserted(const QModelIndex &amp;, int,<br/>int)),
-            this, SLOT(rowsAboutToBeInserted(const QModelIndex &amp;, int, int)));
-    connect(model, SIGNAL(rowsAboutToBeRemoved(const QModelIndex &amp;, int, int)),
-            this, SLOT(rowsAboutToBeRemoved(const QModelIndex &amp;, int, int)));
-    connect(model, SIGNAL(rowsInserted(const QModelIndex &amp;, int, int)),
-            this, SLOT(rowsInserted(const QModelIndex &amp;, int, int)));
-    connect(model, SIGNAL(rowsRemoved(const QModelIndex &amp;, int, int)),
-            this, SLOT(rowsRemoved(const QModelIndex &amp;, int, int)));
-
-    runAllTests();
-}
-
-void ModelTest::runAllTests()
-{
-    if (fetchingMore)
-        return;
-    nonDestructiveBasicTest();
-    rowCount();
-    columnCount();
-    hasIndex();
-    index();
-    parent();
-    data();
-}
-
-/*!
-    nonDestructiveBasicTest tries to call a number of the basic functions (not<br/>all)
-    to make sure the model doesn't outright segfault, testing the functions<br/>that makes sense.
-*/
-void ModelTest::nonDestructiveBasicTest()
-{
-    Q_ASSERT(model-&gt;buddy(QModelIndex()) == QModelIndex());
-    model-&gt;canFetchMore(QModelIndex());
-    Q_ASSERT(model-&gt;columnCount(QModelIndex()) &gt;= 0);
-    Q_ASSERT(model-&gt;data(QModelIndex()) == QVariant());
-    fetchingMore = true;
-    model-&gt;fetchMore(QModelIndex());
-    fetchingMore = false;
-    Qt::ItemFlags flags = model-&gt;flags(QModelIndex());
-    Q_ASSERT(flags == Qt::ItemIsDropEnabled || flags == 0);
-    model-&gt;hasChildren(QModelIndex());
-    model-&gt;hasIndex(0, 0);
-    model-&gt;headerData(0, Qt::Horizontal);
-    model-&gt;index(0, 0);
-    model-&gt;itemData(QModelIndex());
-    QVariant cache;
-    model-&gt;match(QModelIndex(), -1, cache);
-    model-&gt;mimeTypes();
-    Q_ASSERT(model-&gt;parent(QModelIndex()) == QModelIndex());
-    Q_ASSERT(model-&gt;rowCount() &gt;= 0);
-    QVariant variant;
-    model-&gt;setData(QModelIndex(), variant, -1);
-    model-&gt;setHeaderData(-1, Qt::Horizontal, QVariant());
-    model-&gt;setHeaderData(0, Qt::Horizontal, QVariant());
-    model-&gt;setHeaderData(999999, Qt::Horizontal, QVariant());
-    QMap&lt;int, QVariant&gt; roles;
-    model-&gt;sibling(0, 0, QModelIndex());
-    model-&gt;span(QModelIndex());
-    model-&gt;supportedDropActions();
-}
-
-/*!
-    Tests model's implementation of QAbstractItemModel::rowCount() and<br/>hasChildren()
-
-    Models that are dynamically populated are not as fully tested here.
- */
-void ModelTest::rowCount()
-{
-    // check top row
-    QModelIndex topIndex = model-&gt;index(0, 0, QModelIndex());
-    int rows = model-&gt;rowCount(topIndex);
-    Q_ASSERT(rows &gt;= 0);
-    if (rows &gt; 0)
-        Q_ASSERT(model-&gt;hasChildren(topIndex) == true);
-
-    QModelIndex secondLevelIndex = model-&gt;index(0, 0, topIndex);
-    if (secondLevelIndex.isValid()) { // not the top level
-        // check a row count where parent is valid
-        rows = model-&gt;rowCount(secondLevelIndex);
-        Q_ASSERT(rows &gt;= 0);
-        if (rows &gt; 0)
-            Q_ASSERT(model-&gt;hasChildren(secondLevelIndex) == true);
-    }
-
-    // The models rowCount() is tested more extensively in checkChildren(),
-    // but this catches the big mistakes
-}
-
-/*!
-    Tests model's implementation of QAbstractItemModel::columnCount() and<br/>hasChildren()
- */
-void ModelTest::columnCount()
-{
-    // check top row
-    QModelIndex topIndex = model-&gt;index(0, 0, QModelIndex());
-    Q_ASSERT(model-&gt;columnCount(topIndex) &gt;= 0);
-
-    // check a column count where parent is valid
-    QModelIndex childIndex = model-&gt;index(0, 0, topIndex);
-    if (childIndex.isValid())
-        Q_ASSERT(model-&gt;columnCount(childIndex) &gt;= 0);
-
-    // columnCount() is tested more extensively in checkChildren(),
-    // but this catches the big mistakes
-}
-
-/*!
-    Tests model's implementation of QAbstractItemModel::hasIndex()
- */
-void ModelTest::hasIndex()
-{
-    // Make sure that invalid values returns an invalid index
-    Q_ASSERT(model-&gt;hasIndex(-2, -2) == false);
-    Q_ASSERT(model-&gt;hasIndex(-2, 0) == false);
-    Q_ASSERT(model-&gt;hasIndex(0, -2) == false);
-
-    int rows = model-&gt;rowCount();
-    int columns = model-&gt;columnCount();
-
-    // check out of bounds
-    Q_ASSERT(model-&gt;hasIndex(rows, columns) == false);
-    Q_ASSERT(model-&gt;hasIndex(rows + 1, columns + 1) == false);
-
-    if (rows &gt; 0)
-        Q_ASSERT(model-&gt;hasIndex(0, 0) == true);
-
-    // hasIndex() is tested more extensively in checkChildren(),
-    // but this catches the big mistakes
-}
-
-/*!
-    Tests model's implementation of QAbstractItemModel::index()
- */
-void ModelTest::index()
-{
-    // Make sure that invalid values returns an invalid index
-    Q_ASSERT(model-&gt;index(-2, -2) == QModelIndex());
-    Q_ASSERT(model-&gt;index(-2, 0) == QModelIndex());
-    Q_ASSERT(model-&gt;index(0, -2) == QModelIndex());
-
-    int rows = model-&gt;rowCount();
-    int columns = model-&gt;columnCount();
-
-    if (rows == 0)
-        return;
-
-    // Catch off by one errors
-    Q_ASSERT(model-&gt;index(rows, columns) == QModelIndex());
-    Q_ASSERT(model-&gt;index(0, 0).isValid() == true);
-
-    // Make sure that the same index is *always* returned
-    QModelIndex a = model-&gt;index(0, 0);
-    QModelIndex b = model-&gt;index(0, 0);
-    Q_ASSERT(a == b);
-
-    // index() is tested more extensively in checkChildren(),
-    // but this catches the big mistakes
-}
-
-/*!
-    Tests model's implementation of QAbstractItemModel::parent()
- */
-void ModelTest::parent()
-{
-    // Make sure the model wont crash and will return an invalid QModelIndex
-    // when asked for the parent of an invalid index.
-    Q_ASSERT(model-&gt;parent(QModelIndex()) == QModelIndex());
-
-    if (model-&gt;rowCount() == 0)
-        return;
-
-    // Column 0                | Column 1    |
-    // QModelIndex()           |             |
-    //    \- topIndex          | topIndex1   |
-    //         \- childIndex   | childIndex1 |
-
-    // Common error test #1, make sure that a top level index has a parent
-    // that is a invalid QModelIndex.
-    QModelIndex topIndex = model-&gt;index(0, 0, QModelIndex());
-    Q_ASSERT(model-&gt;parent(topIndex) == QModelIndex());
-
-    // Common error test #2, make sure that a second level index has a parent
-    // that is the first level index.
-    if (model-&gt;rowCount(topIndex) &gt; 0) {
-        QModelIndex childIndex = model-&gt;index(0, 0, topIndex);
-        Q_ASSERT(model-&gt;parent(childIndex) == topIndex);
-    }
-
-    // Common error test #3, the second column should NOT have the same<br/>children
-    // as the first column in a row.
-    // Usually the second column shouldn't have children.
-    QModelIndex topIndex1 = model-&gt;index(0, 1, QModelIndex());
-    if (model-&gt;rowCount(topIndex1) &gt; 0) {
-        QModelIndex childIndex = model-&gt;index(0, 0, topIndex);
-        QModelIndex childIndex1 = model-&gt;index(0, 0, topIndex1);
-        Q_ASSERT(childIndex != childIndex1);
-    }
-
-    // Full test, walk n levels deep through the model making sure that all
-    // parent's children correctly specify their parent.
-    checkChildren(QModelIndex());
-}
-
-/*!
-    Called from the parent() test.
-
-    A model that returns an index of parent X should also return X when asking
-    for the parent of the index.
-
-    This recursive function does pretty extensive testing on the whole model in<br/>an
-    effort to catch edge cases.
-
-    This function assumes that rowCount(), columnCount() and index() already<br/>work.
-    If they have a bug it will point it out, but the above tests should have<br/>already
-    found the basic bugs because it is easier to figure out the problem in
-    those tests then this one.
- */
-void ModelTest::checkChildren(const QModelIndex &amp;parent, int currentDepth)
-{
-    // First just try walking back up the tree.
-    QModelIndex p = parent;
-    while (p.isValid())
-        p = p.parent();
-
-    // For models that are dynamically populated
-    if (model-&gt;canFetchMore(parent)) {
-        fetchingMore = true;
-        model-&gt;fetchMore(parent);
-        fetchingMore = false;
-    }
-
-    int rows = model-&gt;rowCount(parent);
-    int columns = model-&gt;columnCount(parent);
-
-    if (rows &gt; 0)
-        Q_ASSERT(model-&gt;hasChildren(parent));
-
-    // Some further testing against rows(), columns(), and hasChildren()
-    Q_ASSERT(rows &gt;= 0);
-    Q_ASSERT(columns &gt;= 0);
-    if (rows &gt; 0)
-        Q_ASSERT(model-&gt;hasChildren(parent) == true);
-
-    //qDebug() &lt;&lt; "parent:" &lt;&lt; model-&gt;data(parent).toString() &lt;&lt; "rows:" &lt;&lt;<br/>rows
-    //         &lt;&lt; "columns:" &lt;&lt; columns &lt;&lt; "parent column:" &lt;&lt; parent.column();
-
-    Q_ASSERT(model-&gt;hasIndex(rows + 1, 0, parent) == false);
-    for (int r = 0; r &lt; rows; ++r) {
-        if (model-&gt;canFetchMore(parent)) {
-            fetchingMore = true;
-            model-&gt;fetchMore(parent);
-            fetchingMore = false;
-        }
-        Q_ASSERT(model-&gt;hasIndex(r, columns + 1, parent) == false);
-        for (int c = 0; c &lt; columns; ++c) {
-            Q_ASSERT(model-&gt;hasIndex(r, c, parent) == true);
-            QModelIndex index = model-&gt;index(r, c, parent);
-            // rowCount() and columnCount() said that it existed...
-            Q_ASSERT(index.isValid() == true);
-
-            // index() should always return the same index when called twice in<br/>a row
-            QModelIndex modifiedIndex = model-&gt;index(r, c, parent);
-            Q_ASSERT(index == modifiedIndex);
-
-            // Make sure we get the same index if we request it twice in a row
-            QModelIndex a = model-&gt;index(r, c, parent);
-            QModelIndex b = model-&gt;index(r, c, parent);
-            Q_ASSERT(a == b);
-
-            // Some basic checking on the index that is returned
-            Q_ASSERT(index.model() == model);
-            Q_ASSERT(index.row() == r);
-            Q_ASSERT(index.column() == c);
-            // While you can technically return a QVariant usually this is a<br/>sign
-            // of an bug in data()  Disable if this really is ok in your model.
-            Q_ASSERT(model-&gt;data(index, Qt::DisplayRole).isValid() == true);
-
-            // If the next test fails here is some somewhat useful debug you<br/>play with.
-            /*
-            if (model-&gt;parent(index) != parent) {
-                qDebug() &lt;&lt; r &lt;&lt; c &lt;&lt; currentDepth &lt;&lt;<br/>model-&gt;data(index).toString()
-                         &lt;&lt; model-&gt;data(parent).toString();
-                qDebug() &lt;&lt; index &lt;&lt; parent &lt;&lt; model-&gt;parent(index);
-                // And a view that you can even use to show the model.
-                //QTreeView view;
-                //view.setModel(model);
-                //view.show();
-            }*/
-
-            // Check that we can get back our real parent.
-            Q_ASSERT(model-&gt;parent(index) == parent);
-
-            // recursively go down the children
-            if (model-&gt;hasChildren(index) &amp;&amp; currentDepth &lt; 10 ) {
-                //qDebug() &lt;&lt; r &lt;&lt; c &lt;&lt; "has children" &lt;&lt;<br/>model-&gt;rowCount(index);
-                checkChildren(index, ++currentDepth);
-            }/* else { if (currentDepth &gt;= 10) qDebug() &lt;&lt; "checked 10 deep";<br/>};*/
-
-            // make sure that after testing the children that the index doesn't<br/>change.
-            QModelIndex newerIndex = model-&gt;index(r, c, parent);
-            Q_ASSERT(index == newerIndex);
-        }
-    }
-}
-
-/*!
-    Tests model's implementation of QAbstractItemModel::data()
- */
-void ModelTest::data()
-{
-    // Invalid index should return an invalid qvariant
-    Q_ASSERT(!model-&gt;data(QModelIndex()).isValid());
-
-    if (model-&gt;rowCount() == 0)
-        return;
-
-    // A valid index should have a valid QVariant data
-    Q_ASSERT(model-&gt;index(0, 0).isValid());
-
-    // shouldn't be able to set data on an invalid index
-    Q_ASSERT(model-&gt;setData(QModelIndex(), QLatin1String("foo"),<br/>Qt::DisplayRole) == false);
-
-    // General Purpose roles that should return a QString
-    QVariant variant = model-&gt;data(model-&gt;index(0, 0), Qt::ToolTipRole);
-    if (variant.isValid()) {
-        Q_ASSERT(qVariantCanConvert&lt;QString&gt;(variant));
-    }
-    variant = model-&gt;data(model-&gt;index(0, 0), Qt::StatusTipRole);
-    if (variant.isValid()) {
-        Q_ASSERT(qVariantCanConvert&lt;QString&gt;(variant));
-    }
-    variant = model-&gt;data(model-&gt;index(0, 0), Qt::WhatsThisRole);
-    if (variant.isValid()) {
-        Q_ASSERT(qVariantCanConvert&lt;QString&gt;(variant));
-    }
-
-    // General Purpose roles that should return a QSize
-    variant = model-&gt;data(model-&gt;index(0, 0), Qt::SizeHintRole);
-    if (variant.isValid()) {
-        Q_ASSERT(qVariantCanConvert&lt;QSize&gt;(variant));
-    }
-
-    // General Purpose roles that should return a QFont
-    QVariant fontVariant = model-&gt;data(model-&gt;index(0, 0), Qt::FontRole);
-    if (fontVariant.isValid()) {
-        Q_ASSERT(qVariantCanConvert&lt;QFont&gt;(fontVariant));
-    }
-
-    // Check that the alignment is one we know about
-    QVariant textAlignmentVariant = model-&gt;data(model-&gt;index(0, 0),<br/>Qt::TextAlignmentRole);
-    if (textAlignmentVariant.isValid()) {
-        int alignment = textAlignmentVariant.toInt();
-        Q_ASSERT(alignment == Qt::AlignLeft ||
-                 alignment == Qt::AlignRight ||
-                 alignment == Qt::AlignHCenter ||
-                 alignment == Qt::AlignJustify ||
-                 alignment == Qt::AlignTop ||
-                 alignment == Qt::AlignBottom ||
-                 alignment == Qt::AlignVCenter ||
-                 alignment == Qt::AlignCenter ||
-                 alignment == Qt::AlignAbsolute ||
-                 alignment == Qt::AlignLeading ||
-                 alignment == Qt::AlignTrailing);
-    }
-
-    // General Purpose roles that should return a QColor
-    QVariant colorVariant = model-&gt;data(model-&gt;index(0, 0),<br/>Qt::BackgroundColorRole);
-    if (colorVariant.isValid()) {
-        Q_ASSERT(qVariantCanConvert&lt;QColor&gt;(colorVariant));
-    }
-
-    colorVariant = model-&gt;data(model-&gt;index(0, 0), Qt::TextColorRole);
-    if (colorVariant.isValid()) {
-        Q_ASSERT(qVariantCanConvert&lt;QColor&gt;(colorVariant));
-    }
-
-    // Check that the "check state" is one we know about.
-    QVariant checkStateVariant = model-&gt;data(model-&gt;index(0, 0),<br/>Qt::CheckStateRole);
-    if (checkStateVariant.isValid()) {
-        int state = checkStateVariant.toInt();
-        Q_ASSERT(state == Qt::Unchecked ||
-                 state == Qt::PartiallyChecked ||
-                 state == Qt::Checked);
-    }
-}
-
-/*!
-    Store what is about to be inserted to make sure it actually happens
-
-    \sa rowsInserted()
- */
-void ModelTest::rowsAboutToBeInserted(const QModelIndex &amp;parent, int start, int<br/>end)
-{
-    Q_UNUSED(end);
-    Changing c;
-    c.parent = parent;
-    c.oldSize = model-&gt;rowCount(parent);
-    c.last = model-&gt;data(model-&gt;index(start - 1, 0, parent));
-    c.next = model-&gt;data(model-&gt;index(start, 0, parent));
-    insert.push(c);
-}
-
-/*!
-    Confirm that what was said was going to happen actually did
-
-    \sa rowsAboutToBeInserted()
- */
-void ModelTest::rowsInserted(const QModelIndex &amp; parent, int start, int end)
-{
-    Changing c = insert.pop();
-    Q_ASSERT(c.parent == parent);
-    Q_ASSERT(c.oldSize + (end - start + 1) == model-&gt;rowCount(parent));
-    Q_ASSERT(c.last == model-&gt;data(model-&gt;index(start - 1, 0, c.parent)));
-    /*
-    if (c.next != model-&gt;data(model-&gt;index(end + 1, 0, c.parent))) {
-        qDebug() &lt;&lt; start &lt;&lt; end;
-        for (int i=0; i &lt; model-&gt;rowCount(); ++i)
-            qDebug() &lt;&lt; model-&gt;index(i, 0).data().toString();
-        qDebug() &lt;&lt; c.next &lt;&lt; model-&gt;data(model-&gt;index(end + 1, 0, c.parent));
-    }
-    */
-    Q_ASSERT(c.next == model-&gt;data(model-&gt;index(end + 1, 0, c.parent)));
-}
-
-void ModelTest::layoutAboutToBeChanged()
-{
-    for (int i = 0; i &lt; qBound(0, model-&gt;rowCount(), 100); ++i)
-        changing.append(QPersistentModelIndex(model-&gt;index(i, 0)));
-}
-
-void ModelTest::layoutChanged()
-{
-    for (int i = 0; i &lt; changing.count(); ++i) {
-        QPersistentModelIndex p = changing[i];
-        Q_ASSERT(p == model-&gt;index(p.row(), p.column(), p.parent()));
-    }
-    changing.clear();
-}
-
-/*!
-    Store what is about to be inserted to make sure it actually happens
-
-    \sa rowsRemoved()
- */
-void ModelTest::rowsAboutToBeRemoved(const QModelIndex &amp;parent, int start, int<br/>end)
-{
-    Changing c;
-    c.parent = parent;
-    c.oldSize = model-&gt;rowCount(parent);
-    c.last = model-&gt;data(model-&gt;index(start - 1, 0, parent));
-    c.next = model-&gt;data(model-&gt;index(end + 1, 0, parent));
-    remove.push(c);
-}
-
-/*!
-    Confirm that what was said was going to happen actually did
-
-    \sa rowsAboutToBeRemoved()
- */
-void ModelTest::rowsRemoved(const QModelIndex &amp; parent, int start, int end)
-{
-    Changing c = remove.pop();
-    Q_ASSERT(c.parent == parent);
-    Q_ASSERT(c.oldSize - (end - start + 1) == model-&gt;rowCount(parent));
-    Q_ASSERT(c.last == model-&gt;data(model-&gt;index(start - 1, 0, c.parent)));
-    Q_ASSERT(c.next == model-&gt;data(model-&gt;index(start, 0, c.parent)));
-}
-
diff --git a/braindump/src/modeltest.h b/braindump/src/modeltest.h
deleted file mode 100644
index 38b6b2b..0000000
--- a/braindump/src/modeltest.h
+++ /dev/null
@@ -1,76 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2007 Trolltech ASA. All rights reserved.
-**
-** This file is part of the Qt Concurrent project on Trolltech Labs.
-**
-** This file may be used under the terms of the GNU General Public
-** License version 2.0 as published by the Free Software Foundation
-** and appearing in the file LICENSE.GPL included in the packaging of
-** this file.  Please review the following information to ensure GNU
-** General Public Licensing requirements will be met:
-** <url>http://www.trolltech.com/products/qt/opensource.html</url>
-**
-** If you are unsure which license is appropriate for your use, please
-** review the following information:
-** <url>http://www.trolltech.com/products/qt/licensing.html</url> or contact the
-** sales department at <email>sales@trolltech.com</email>.
-**
-** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
-** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
-**
-****************************************************************************/
-
-#ifndef MODELTEST_H
-#define MODELTEST_H
-
-#include &lt;QtCore/QObject&gt;
-#include &lt;QtCore/QAbstractItemModel&gt;
-#include &lt;QtCore/QStack&gt;
-
-class ModelTest : public QObject
-{
-    Q_OBJECT
-
-public:
-    ModelTest(QAbstractItemModel *model, QObject *parent = 0);
-
-private Q_SLOTS:
-    void nonDestructiveBasicTest();
-    void rowCount();
-    void columnCount();
-    void hasIndex();
-    void index();
-    void parent();
-    void data();
-
-protected Q_SLOTS:
-    void runAllTests();
-    void layoutAboutToBeChanged();
-    void layoutChanged();
-    void rowsAboutToBeInserted(const QModelIndex &amp;parent, int start, int end);
-    void rowsInserted(const QModelIndex &amp; parent, int start, int end);
-    void rowsAboutToBeRemoved(const QModelIndex &amp;parent, int start, int end);
-    void rowsRemoved(const QModelIndex &amp; parent, int start, int end);
-
-private:
-    void checkChildren(const QModelIndex &amp;parent, int currentDepth = 0);
-
-    QAbstractItemModel *model;
-
-    struct Changing
-    {
-        QModelIndex parent;
-        int oldSize;
-        QVariant last;
-        QVariant next;
-    };
-    QStack&lt;Changing&gt; insert;
-    QStack&lt;Changing&gt; remove;
-
-    bool fetchingMore;
-
-    QList&lt;QPersistentModelIndex&gt; changing;
-};
-
-#endif
</para></body></message>